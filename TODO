TODO

logic for houses needs to be better abstracted

strategy for using the getting out of jail card
fix NPVs to include future houses / hotels
simulation (NPVs -> NPVs)
  - tracking the amount of return and discounting by the discount rate (5%)
  - implement the decision functions for players in a consistent way with the NPVs


BASIC STRATEGY

step 1: calculate basic NPVs

basic definitions
  - a day is all four players taking a turn
  - a year is defined by the average number of turns taken to pass go
  - probability of landing on a square is defined to be the probability of 
    landing on that square PER YEAR

functions needed
  - some function that calculates the probability of landing on a square.
  - some function that calculates a discount rate. we can just pick something 
    like 5% for now.
  - a function that calculates the NPVs for every square. it should basically
    just be a geometric sum.
      probability of landing on a square * rent / discount rate

step 2: iterate on the NPVs

functions needed
  - decide takes NPVs + state of board and outputs a probability
  - play takes decide and plays the game. every time someone needs to make
    a decision they will just call decide. the game should keep track of how
    much each square earns over the course of the game and output an NPV
    at the end of the game

we can then iterate: a set of NPVs goes into play, a set of NPVs comes out
the idea is that if we iterate enough, we can hit a fixed point, which should be
a local max.

step 3: testing

functions needed
  - some set of benchmark decide functions
  - play that will play the game to its conclusion with each player having
    some strategy

this way we can test out strategy out and prove that it's better